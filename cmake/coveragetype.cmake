include ( ${CMAKE_CURRENT_LIST_DIR}/CheckAndAddFlag.cmake )

if ( NOT ( CMAKE_BUILD_TYPE STREQUAL "Debug" OR CMAKE_BUILD_TYPE STREQUAL "Coverage" ))
  message ( WARNING "Code coverage results with an optimized (non-Debug) build may be misleading" )
endif ()

checkandaddflag ( -fprofile-instr-generate CLANG_COVERAGE_FLAGS )
if ( NOT CLANG_COVERAGE_FLAGS )
  checkandaddflag ( --coverage GCC_COVERAGE_FLAGS )
else ()
  checkandaddflag ( -fcoverage-mapping CLANG_COVERAGE_FLAGS )
endif ()

foreach ( MAJOR RANGE 10 3 -1 )
  foreach ( MINOR RANGE 10 0 -1 )
    list ( APPEND LLVM_PROFDATA_ALIASES llvm-profdata-${MAJOR}.${MINOR} llvm-profdata-mp-${MAJOR}.${MINOR} )
    list ( APPEND LLVM_SHOW_ALIASES llvm-cov-${MAJOR}.${MINOR} llvm-cov-mp-${MAJOR}.${MINOR} )
  endforeach ()
endforeach ()

find_program ( GCOV_PATH gcov )
find_program ( LLVM_PROFDATA_PATH NAMES ${LLVM_PROFDATA_ALIASES} llvm-profdata PATHS /Library/Developer/CommandLineTools/usr/bin/ )
find_program ( LLVM_SHOW_PATH NAMES ${LLVM_SHOW_ALIASES} llvm-cov PATHS /Library/Developer/CommandLineTools/usr/bin/ )

if ( CLANG_COVERAGE_FLAGS AND LLVM_PROFDATA_PATH AND LLVM_SHOW_PATH )
  list ( APPEND COVERAGE_STYLES clang )
elseif ( GCC_COVERAGE_FLAGS AND GCOV_PATH )
  list ( APPEND COVERAGE_STYLES gcc )
endif ()

if ( COVERAGE_STYLES_DEBUG )
  if ( NOT clang IN_LIST COVERAGE_STYLES )
    if ( NOT CLANG_COVERAGE_FLAGS )
      message ( STATUS "clang style not supported because compiler flags do not work" )
    endif ()
    if ( NOT LLVM_PROFDATA_PATH )
      message ( STATUS "clang style not supported because llvm-profdata not found" )
    endif ()
    if ( NOT LLVM_SHOW_PATH )
      message ( STATUS "clang style not supported because llvm-cov not found" )
    endif ()
  endif ()
endif ()

if ( DEFINED BUILD_COVERAGE_STYLES )
  foreach ( STYLE IN LISTS COVERAGE_STYLES )
    if ( NOT ${STYLE} IN_LIST BUILD_COVERAGE_STYLES )
      list ( REMOVE_ITEM COVERAGE_STYLES ${STYLE} )
    endif ()
  endforeach ()
endif ()

if ( COVERAGE_STYLES )
  set ( COVERAGE_SUPPORTED TRUE )
else ()
  set ( COVERAGE_SUPPORTED FALSE )
endif ()

message ( STATUS "Supported coverage styles: ${COVERAGE_STYLES}" )
